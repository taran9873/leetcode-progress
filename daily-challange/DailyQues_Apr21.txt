Question: 2145. Count the Hidden Sequences
Date: 21 April 2025

Input: differences = [1,-3,4], lower = 1, upper = 6

thought process:

1,-3,4

min ele -> 1

seq -> 1, 2, -1, 3  <- invalid because of out of bounds of [lower,upper] -> [1,6]

brute force: 

go from lower to upper, apply difference array, check if sequence is valid 

TC: O(N*M) <- N is upper-lower, M is diff array len
SC: O(1) 

Better:

Input: differences = [1,2,4], lower = 1, upper = 9

1,2,4

0,1,3,7  <- prefix sum
1,2,4,8  <- adding 1 to all <- generates valid sequence
2,3,5,9  <- again, same

answer -> upper - prefix sum last element

1,-3,4   lower = 1, upper = 6

possible combination = 6 - 2(prefixSum) + 1 = 5 - (lower - (minEle in prefixSum arr))
0,1,-2,2 <- out of range
1,2,-1,3 <- out of range
2,3,0,4  <- out of range
3,4,1,5
4,5,2,6


ans = 

need to use lower value as well smh

approach: (upper-prefixSum+1)-(lower-minm)

Got WA 

differences = [3,-4,5,1,-2]  lower = -4   upper = 5

  3,-4,5,1,-2

0,3,-1,4,5,3


we have prefix sum array, we can do +1 or -1 to all element <- gives valid seq

-> figure out how many times -1 i can do so that min ele does not go beyond lower

-> figure out how many times +1 i can do so that max ele does not go beyond upper


1,-3,4, lower = 1, upper = 6

0,1,-2,2
min = -2, max = 2

max can go upto 6 so this 2 can go till 6 -> 4 combination <- 

before calculating, reach a valid seq first -> -2 is invalid

0,1,-2,2

add (lower-min)(1--2)(3) to make it valid -> 3,4,1,5


upper - (maxm + lower-minm) +1

WA differences = [3,-4,5,1,-2]  lower = -4   upper = 5

  3,-4,5,1,-2

0,3,-1,4,5,3   <- we can go lower
-1,2,-2,3,4,2
-2,1,-3,2,3,1
-3,0,-4,1,2,0




differences = [4,-7,2]  lower = 3  upper = 6


0,4,-3,-1

min = -3, max = 4


ans = upper - (maxm + lower-minm) +1;

code: 
class Solution {
public:
    int numberOfArrays(vector<int>& differences, int lower, int upper) {
        long long prefixSum = 0;
        long long minm = 0,maxm=0;
        for(auto n:differences) {
            prefixSum+=n;
            maxm = max(prefixSum,maxm);
            minm = min(minm,prefixSum);
        }
        int ans = upper - (maxm + lower-minm) +1;
        return max(0,ans);
    }
};










